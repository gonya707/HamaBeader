function varargout = gui(varargin)

    gui_Singleton = 1;
    gui_State = struct('gui_Name',       mfilename, ...
        'gui_Singleton',  gui_Singleton, ...
        'gui_OpeningFcn', @gui_OpeningFcn, ...
        'gui_OutputFcn',  @gui_OutputFcn, ...
        'gui_LayoutFcn',  [], ...
        'gui_Callback',   []);
    if nargin && ischar(varargin{1})
        gui_State.gui_Callback = str2func(varargin{1});
    end

    if nargout
        [varargout{1:nargout}] = gui_mainfcn(gui_State, varargin{:});
    else
        gui_mainfcn(gui_State, varargin{:});
    end
% End initialization code - DO NOT EDIT

end
% --- Executes just before gui is made visible.
function gui_OpeningFcn(hObject, eventdata, handles, varargin)
% Choose default command line output for gui
handles.output = hObject;

% Update handles structure
guidata(hObject, handles);
end

function varargout = gui_OutputFcn(hObject, eventdata, handles)
    varargout{1} = handles.output;
end

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% THE ABOVE LINES ARE AUTOGENERATED. DO NOT TOUCH %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

% Enable all the GUI controls. This should be called just after display the image  
function [] = enableAll(handles)
    set(handles.ButtonSave, 'Enable', 'on');
    set(handles.RadioSmall, 'Enable', 'on');
    set(handles.RadioBig, 'Enable', 'on');
    set(handles.RadioMedium, 'Enable', 'on');
    set(handles.DitherCheck, 'Enable', 'on');
    set(handles.ColorAdjCheck, 'Enable', 'on');
    set(handles.TextWidth, 'Enable', 'on');
    set(handles.TextHeight, 'Enable', 'on');
    set(handles.TextColors, 'Enable', 'on');
    set(handles.TextIn, 'Enable', 'on');
    set(handles.TextCm, 'Enable', 'on');
end

% Disable all the GUI controls. This should be called if there is no image displayed.
function [] = disableAll(handles)
    set(handles.EditTextURL, 'string' , '');
    cla(handles.ImageBox,'reset');
    set(handles.ImageBox, 'Visible', 'off');
    set(handles.ButtonSave, 'Enable', 'off');
    set(handles.RadioSmall, 'Enable', 'off');
    set(handles.RadioBig, 'Enable', 'off');
    set(handles.RadioMedium, 'Enable', 'off');
    set(handles.DitherCheck, 'Enable', 'off');
    set(handles.RadioDisabled, 'Enable', 'off');
    set(handles.ColorAdjCheck, 'Enable', 'off');
    set(handles.TextWidth, 'Enable', 'off');
    set(handles.TextHeight, 'Enable', 'off');
    set(handles.TextColors, 'Enable', 'off');
    set(handles.TextIn, 'Enable', 'off');
    set(handles.TextCm, 'Enable', 'off');
end

% set the image in display. Called every time a control changes. This function check all the control states and show the desired image.
% the paramenter img should be the original image
function mapS = setImage(handles, img, alpha)

    %use function textscan to simplify into 1 file

    fileID = fopen('catalogValues.ini', 'r');
    formatSpec = '%d %d %d %d';
    sizeA = [4 Inf];

    values = fscanf(fileID, formatSpec ,sizeA)';

    fileID = fopen('catalogNames.ini', 'r');
    formatSpec = '%s';
    names = textscan(fileID,formatSpec);

    % names{1}{12}
    % check dither
    if ( get(handles.DitherCheck, 'Value') == get(handles.DitherCheck, 'Max'))
        shouldIUseDither = 'dither';
    else
        shouldIUseDither = 'nodither';
    end
    
    map = selectCatalog(values, handles);

    [imgS, mapS] = rgb2ind(img, map, shouldIUseDither);

    % check adjustment
%     if(get(handles.ColorAdjCheck, 'Value') == get(handles.ColorAdjCheck, 'Max'))
%         imgDisp = imgS;
%         histo = hbHistogram (imgDisp);
%         
%         [M, N] = size (imgDisp);
%         tresh = M * N * 0.02; %treshold 2 percent, this could be interesting to set with a slider
% 
%         newMap = [];
%         [M, N] = size (histo);
% 
%         for i = 1 : M
%             nCol = cell2mat(histo(i, 2));
%             if (nCol > tresh) 
%                 newMap = [newMap map(i,:)'];
%             end
%         end
% 
%         newMap = newMap';
%         [imgS, mapS] = rgb2ind(img, newMap, shouldIUseDither);
% 
%     end
    
    %reduce colormap
%     imgDisp = imgS;
     histo = hbHistogram (values, imgS);
%     
%     newMap = [];
%     [M, N] = size (histo);
%     for i = 1 : M
%         nCol = cell2mat(histo(i, 2));
%         if (nCol > 0) 
%             newMap = [newMap map(i,:)'];
%         end
%     end
%     
%     currentCM = newMap';
 set(handles.TextColors, 'string', ['Colors: ' num2str(sum(histo ~= 0))]);
%     
    axes(handles.ImageBox);
    h = imshow(imgS, mapS);
    set(h, 'AlphaData', alpha);
end

% changes the text boxes for sizes.
function [] = sizesLabel(handles, img)
    [M N a] = size(img);
    set(handles.TextHeight, 'string', ['Height: ' num2str(M)]);
    set(handles.TextWidth, 'string', ['Width: ' num2str(N)]);

    %Mini Beads  2.5mm
    %Midi Beads  5mm
    %Maxi Beads  10mm

    if  (get(handles.RadioBig , 'Value') == get(handles.RadioBig, 'Max'))
        hmSize = 10;
    else
        if (get(handles.RadioMedium , 'Value') == get(handles.RadioMedium, 'Max'))
            hmSize = 5;
        else
            hmSize = 2.5;
        end
    end
    
    set(handles.TextCm, 'string', ['Size (cm): ' num2str((N * hmSize) / 10) ' x ' num2str((M * hmSize) / 10)] );
    set(handles.TextIn, 'string', ['Size (in): ' num2str(0.01* round(100 *(N * hmSize) / 25.4)) ' x ' num2str(0.01* round(100 *(M * hmSize) / 25.4))] );

end

% 'Explore' button callback
function ButtonExplore_Callback(hObject, eventdata, handles)

    [handles.filename, handles.pathname] = uigetfile({'*.png;*.tif;*.bmp;*.jpg','Images';'*.*','All files' },'Select an image');
    set(handles.EditTextURL, 'string' , [handles.pathname handles.filename]);

    if (~isempty(get(handles.EditTextURL, 'string')))
        [img m alpha] = imread([handles.pathname handles.filename]);
        clear m;
        
        [okImage errorMsg] = hbIsImage(img);
        
        if (1 == okImage)
            setImage(handles, img, alpha);
            enableAll(handles);
            sizesLabel(handles, img);
        else
            warndlg(errorMsg);
            disableAll(handles);
        end
    end
end

function EditTextURL_CreateFcn(hObject, eventdata, handles)
    if ispc && isequal(get(hObject, 'BackgroundColor'), get(0, 'defaultUicontrolBackgroundColor'))
        set(hObject,'BackgroundColor','white');
    end
end

function UIPanel_SelectionChangeFcn(hObject, eventdata, handles)
end

%saves the current displayed image
function ButtonSave_Callback(hObject, eventdata, handles)

   imwrite(getimage(handles.ImageBox), colormap, 'saved image.png','png');
end

% ui pannel for bead size. detect the event and run a setImage
function BeadSize_SelectionChangeFcn(hObject, eventdata, handles)
    img = getimage(handles.ImageBox);
    sizesLabel(handles, img);
end

% --- Executes on button press in ColorAdjCheck.
function ColorAdjCheck_Callback(hObject, eventdata, handles)
    [img m alpha] = imread(get(handles.EditTextURL, 'string'));
    setImage(handles, img, alpha);
end

% --- Executes on button press in DitherCheck.
function DitherCheck_Callback(hObject, eventdata, handles)
    [img m alpha] = imread(get(handles.EditTextURL, 'string'));
    setImage(handles, img, alpha);
end

function checkboxMatt_Callback(hObject, eventdata, handles)
% Hint: get(hObject,'Value') returns toggle state of checkboxMatt
    [img m alpha] = imread(get(handles.EditTextURL, 'string'));
    setImage(handles, img, alpha);
end

function checkboxTranslucent_Callback(hObject, eventdata, handles)
    [img m alpha] = imread(get(handles.EditTextURL, 'string'));
    setImage(handles, img, alpha);
end

function checkboxFluorescent_Callback(hObject, eventdata, handles)
    [img m alpha] = imread(get(handles.EditTextURL, 'string'));
    setImage(handles, img, alpha);
end

function checkboxPastel_Callback(hObject, eventdata, handles)
    [img m alpha] = imread(get(handles.EditTextURL, 'string'));
    setImage(handles, img, alpha);
end

function checkboxGlow_Callback(hObject, eventdata, handles)
    [img m alpha] = imread(get(handles.EditTextURL, 'string'));
    setImage(handles, img, alpha);
end

function checkboxMetal_Callback(hObject, eventdata, handles)
    [img m alpha] = imread(get(handles.EditTextURL, 'string'));
    setImage(handles, img, alpha);
end

function checkboxNeon_Callback(hObject, eventdata, handles)
    [img m alpha] = imread(get(handles.EditTextURL, 'string'));
    setImage(handles, img, alpha);
end
