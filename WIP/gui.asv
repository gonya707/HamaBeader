function varargout = gui(varargin)

    gui_Singleton = 1;
    gui_State = struct('gui_Name',       mfilename, ...
        'gui_Singleton',  gui_Singleton, ...
        'gui_OpeningFcn', @gui_OpeningFcn, ...
        'gui_OutputFcn',  @gui_OutputFcn, ...
        'gui_LayoutFcn',  [], ...
        'gui_Callback',   []);
    if nargin && ischar(varargin{1})
        gui_State.gui_Callback = str2func(varargin{1});
    end

    if nargout
        [varargout{1:nargout}] = gui_mainfcn(gui_State, varargin{:});
    else
        gui_mainfcn(gui_State, varargin{:});
    end
% End initialization code - DO NOT EDIT

end
% --- Executes just before gui is made visible.
function gui_OpeningFcn(hObject, eventdata, handles, varargin)
% Choose default command line output for gui
handles.output = hObject;

% Update handles structure
guidata(hObject, handles);
end

function varargout = gui_OutputFcn(hObject, eventdata, handles)
    varargout{1} = handles.output;
end

% --- Executes during object creation, after setting all properties.
function SizeSlider_CreateFcn(hObject, eventdata, handles)
    if isequal(get(hObject,'BackgroundColor'), get(0,'defaultUicontrolBackgroundColor'))
        set(hObject,'BackgroundColor',[.9 .9 .9]);
    end

end

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% THE ABOVE LINES ARE AUTOGENERATED. DO NOT TOUCH %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

% Enable all the GUI controls. This should be called just after display the image  
function [] = enableAll(handles)
    set(handles.ButtonSave, 'Enable', 'on');
    set(handles.RadioSmall, 'Enable', 'on');
    set(handles.RadioBig, 'Enable', 'on');
    set(handles.RadioMedium, 'Enable', 'on');
    set(handles.DitherCheck, 'Enable', 'on');
    set(handles.ColorAdjCheck, 'Enable', 'on');
    set(handles.SizeSlider, 'Enable', 'on');
    set(handles.TextWidth, 'Enable', 'on');
    set(handles.TextHeight, 'Enable', 'on');
    set(handles.TextColors, 'Enable', 'on');
    set(handles.TextIn, 'Enable', 'on');
    set(handles.TextCm, 'Enable', 'on');
end

% Disable all the GUI controls. This should be called if there is no image displayed.
function [] = disableAll(handles)
    set(handles.EditTextURL, 'string' , '');
    cla(handles.ImageBox,'reset');
    set(handles.ImageBox, 'Visible', 'off');
    set(handles.ButtonSave, 'Enable', 'off');
    set(handles.RadioSmall, 'Enable', 'off');
    set(handles.RadioBig, 'Enable', 'off');
    set(handles.RadioMedium, 'Enable', 'off');
    set(handles.DitherCheck, 'Enable', 'off');
    set(handles.RadioDisabled, 'Enable', 'off');
    set(handles.ColorAdjCheck, 'Enable', 'off');
    set(handles.TextWidth, 'Enable', 'off');
    set(handles.TextHeight, 'Enable', 'off');
    set(handles.TextColors, 'Enable', 'off');
    set(handles.TextIn, 'Enable', 'off');
    set(handles.TextCm, 'Enable', 'off');
end

% set the image in display. Called every time a control changes. This function check all the control states and show the desired image.
% the paramenter img should be the original image
function mapS = setImage(handles, img)

    %FIXME I doubt this will work on the compiled version. Just a .dat or .mat or whatever
    map = xlsread('completeMap.xlsx');
    map = map./255;

    %TODO get dither
    %TODO change radio with checkbox
    % get shouldIUseDither = 'dither' or 'nodither' at the end of this block
    % mockup
        shouldIUseDither = 'nodither';
    % end mockup
    if (0)

    else
    end

    [imgS, mapS] = rgb2ind(img, map, shouldIUseDither);

    if(0)%TODO mockup: get Checkbox state... if true
        imgDisp = imgS;
        histo = hbHistogram (imgDisp);

        newMap = [];
        [M, N] = size (histo);
        for i = 1 : M
            nCol = cell2mat(histo(i, 2));
            if (nCol > 1000) %FIXME improve this, slide and let the user set the threshold?
                newMap = [newMap map(i,:)'];
            end
        end

        newMap = newMap';
        [imgS, mapS] = rgb2ind(img, newMap, shouldIUseDither);

    end
    
    %reduce colormap
    imgDisp = imgS;
    histo = hbHistogram (imgDisp);
    
    newMap = [];
    [M, N] = size (histo);
    for i = 1 : M
        nCol = cell2mat(histo(i, 2));
        if (nCol > 0) 
            newMap = [newMap map(i,:)'];
        end
    end
    
    %TODO function this
        [M N] = size(img);
        set(handles.TextHeight, 'string', ['Height: ' num2str(M)]);
        set(handles.TextWidth, 'string', ['Width: ' num2str(N)]);

        %Mini Beads  2.5mm
        %Midi Beads  5mm
        %Maxi Beads  10mm
        %TODO mouckup: get the radiobutton state
        hmSize = 0.25; %milimeters
        %end of mockup
        set(handles.TextCm, 'string', ['Size (cm): ' num2str((N * hmSize) / 10) ' x ' num2str((M * hmSize) / 10)] );
        set(handles.TextIn, 'string', ['Size (in): ' num2str((N * hmSize) / 25.4) ' x ' num2str((M * hmSize) / 25.4)] );

        currentCM = newMap';
        set(handles.TextColors, 'string', ['Colors: ' num2str(length(currentCM))]); 
    %end TODO
    
    axes(handles.ImageBox);
    imshow(imgS, mapS);
end

% 'Explore' button callback
function ButtonExplore_Callback(hObject, eventdata, handles)

    [handles.filename, handles.pathname] = uigetfile({'*.png;*.tif;*.bmp;*.jpg','Images';'*.*','All files' },'Select an image');
    set(handles.EditTextURL, 'string' , [handles.pathname handles.filename]);

    if (~isempty(get(handles.EditTextURL, 'string')))
        img = imread([handles.pathname handles.filename]);
        
        [okImage errorMsg] = hbIsImage(img);
        
        if (1 == okImage)
            map = setImage(handles, img);
            enableAll(handles);
        else

            warndlg(errorMsg);
            disableAll(handles);
        end
    end
end



function EditTextURL_CreateFcn(hObject, eventdata, handles)
    if ispc && isequal(get(hObject, 'BackgroundColor'), get(0, 'defaultUicontrolBackgroundColor'))
        set(hObject,'BackgroundColor','white');
    end
end

function UIPanel_SelectionChangeFcn(hObject, eventdata, handles)
end

%saves the current displayed image
function ButtonSave_Callback(hObject, eventdata, handles)

   imwrite(getimage(handles.ImageBox), colormap, 'saved image.png','png');
end


% --- Executes on slider movement.
function SizeSlider_Callback(hObject, eventdata, handles)

end

% ui pannel for bead size. detect the event and run a setImage
function BeadSize_SelectionChangeFcn(hObject, eventdata, handles)
    img = imread(get(handles.EditTextURL, 'string'));
    setImage(handles, img);
end

% --- Executes on button press in ColorAdjCheck.
function ColorAdjCheck_Callback(hObject, eventdata, handles)
    img = imread(get(handles.EditTextURL, 'string'));
    setImage(handles, img);
end

% --- Executes on button press in DitherCheck.
function DitherCheck_Callback(hObject, eventdata, handles)
    img = imread(get(handles.EditTextURL, 'string'));
    setImage(handles, img);
end
